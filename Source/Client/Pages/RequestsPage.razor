@page "/requests"
@using System.Security.Claims
@inject IRequestService RequestService
@inject IAuthService AuthService

<section class="hero is-medium is-link">
  <div class="hero-body">
    <p class="title">
      My requests
    </p>
    <p class="subtitle">
      Manage my requests
    </p>
    <div >
      @if (isLoading)
      {
          <Loading />
      }
      else
      {
        
          <div  class="row columns is-multiline">
            @foreach (var item in myRequests)
            {
                <div  key="@(item.Id)" class="column is-4">
                  <RequestItem User="User" Request="item"/>
                </div>
                
            }
            <div class="column is-4">
                <div class="card" style="height: 100%;">
                    <div class="card-content"  style="height: 100%;">
                      <div class="columns has-text-centered is-vcentered"  style="height: 100%;">
                        <div class="column " style="padding-top: 30px;">
                          <a href="/requests/new" class="is-size-4" >
                            <span class="icon is-small">
                                <i class="mdi mdi-plus" aria-hidden="true"></i>
                            </span>
                            <span>Create new request!</span>
                          </a>
                        </div>
                      </div>
                    </div>
                </div>
              </div>
          </div>
        <div class="columns is-centered">
          <div class="column has-text-centered is-2">
          </div>
        </div>
      }
    </div>
  </div>
</section>
<ErrorDialog IsError="@isError" ErrorMessage="@errorMessage" OnClosedDialog="(k=>isError = false)"></ErrorDialog>


@code{

  [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
  private bool isError = false;
  private string errorMessage;
  private bool isLoading;

  private List<RequestDto> myRequests = new List<RequestDto>();
  public SystemUserDto User { get; set; }

  protected override async Task OnParametersSetAsync()
  {
      await LoadMyRequests();
  }

  private async Task LoadMyRequests()
  {
    isLoading = true;
    var userInfoResponse = await AuthService.GetUserInformation();
    if (userInfoResponse.IsOkResponse())
    {
        User = userInfoResponse.Value;
        var servicesResponse = await RequestService.GetMines();
        if (servicesResponse.IsOkResponse())
        {
            myRequests = servicesResponse.Value;
        }
        else
        {
            Error(servicesResponse.Message);
        }
    }
    else
    {
      Error(userInfoResponse.Message);
    }
    isLoading = false;
  }

  private void Error(string message)
  {
      isError = true;
      errorMessage = message;
  }
}

        