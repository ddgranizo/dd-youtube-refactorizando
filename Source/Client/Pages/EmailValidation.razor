@page "/email/validation"
@using System.Security.Claims
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<section class="hero is-medium">
  <div class="hero-body">
    <p class="title">
      Email validation
    </p>
    <div >
      @if (isLoading)
      {
          <Loading />
      }
      else
      {
        @if (isValidate)
        {
            <article class="message is-success">
            <div class="message-header">
              <p>Validation complete</p>
            </div>
            <div class="message-body">
              Your email has been confirmed successfuly!
            </div>
          </article>
        }
        else
        {
           <article class="message is-danger">
            <div class="message-header">
              <p>Error during validation</p>
            </div>
            <div class="message-body">
              It was an error validating the email. The server responsed @errorMessage
            </div>
          </article>
        }
        
      }
    </div>
  </div>
</section>
<ErrorDialog IsError="@isError" ErrorMessage="@errorMessage" OnClosedDialog="(k=>isError = false)"></ErrorDialog>


@code{

  private bool isError = false;
  private string errorMessage;
  private bool isLoading;
  public string Id { get; set; }
  public string Token { get; set; }
  private bool isValidate;
  protected override async Task OnParametersSetAsync()
  {
      await TryValidate();
  }

  private async Task TryValidate()
  {
    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
    {
        Id = id;
    }
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
    {
        Token = WebUtility.UrlEncode( token);
        Console.WriteLine(Token);
    }
    if (string.IsNullOrEmpty(Id) 
        || string.IsNullOrEmpty(Token))
    {
        errorMessage = "Invalid url";
        return;
    }
    isLoading = true;
    var servicesResponse = await AuthService.ValideEmail(Id, Token);
    if (servicesResponse.IsOkResponse())
    {
        isValidate = true;
    }
    else
    {
        isValidate = false;
        Error(servicesResponse.Message);
    }
    isLoading = false;
  }

  private void Error(string message)
  {
      isError = true;
      errorMessage = message;
  }
}

        